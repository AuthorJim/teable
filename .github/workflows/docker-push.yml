name: Build and Push to Alibaba Cloud Registry

on:
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        #        platforms: [linux/amd64, linux/arm64]
        #        include:
        #          - platforms: linux/amd64
        #            cache-image-tag: buildcache-amd64
        #          - platforms: linux/arm64
        #            cache-image-tag: buildcache-arm64
        platforms: [linux/arm64]
        include:
          - platforms: linux/arm64
            cache-image-tag: buildcache-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            registry.cn-beijing.aliyuncs.com/bieber/teable
            ghcr.io/teableio/teable
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGES_KEY }}

      - name: Login to Aliyuncs Registry
        uses: docker/login-action@v3
        with:
          registry: registry.cn-beijing.aliyuncs.com
          username: ${{ secrets.ALI_DOCKER_USERNAME }}
          password: ${{ secrets.ALI_DOCKER_PASSWORD }}

      # Why not specify multiple platforms directly?
      # The reason is that sometimes the action may suffer from prolonged build times or even freeze due to insufficient machine resources.
      # Therefore, for the sake of stability, it's better to use matrix builds for multi-architecture images.
      - name: Build and push (${{ matrix.platforms }})
        uses: docker/build-push-action@v5
        with:
          context: .
          file: dockers/teable/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          platforms: ${{ matrix.platforms }}
          cache-from: type=registry,ref=ghcr.io/teableio/teable:${{ matrix.cache-image-tag }}
          cache-to: type=registry,ref=ghcr.io/teableio/teable:${{ matrix.cache-image-tag }},mode=max
